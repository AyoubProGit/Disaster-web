name: Deploy to Render

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  NPM_CACHE_FOLDER: ~/.npm
  NODE_MODULES_CACHE_FOLDER: ~/.npm

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run type checking
      run: npx tsc --noEmit
      
    - name: Check for security vulnerabilities
      run: npm audit --audit-level=moderate || true

  test-and-build:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Test build output
      run: |
        echo "üîç Verifying build output..."
        
        # V√©rifier que le build a cr√©√© les fichiers n√©cessaires
        if [ ! -d "dist" ]; then
          echo "‚ùå Build failed: dist directory not found"
          exit 1
        fi
        
        # V√©rifier la taille du bundle (optimisation √©co-conception)
        BUNDLE_SIZE=$(du -sh dist | cut -f1)
        echo "üì¶ Bundle size: $BUNDLE_SIZE"
        
        # V√©rifier que les assets sont pr√©sents
        if [ ! -f "dist/index.html" ]; then
          echo "‚ùå Build failed: index.html not found"
          exit 1
        fi
        
        # V√©rifier la pr√©sence des fichiers JS et CSS
        JS_FILES=$(find dist -name "*.js" | wc -l)
        CSS_FILES=$(find dist -name "*.css" | wc -l)
        echo "üìÅ JavaScript files: $JS_FILES"
        echo "üìÅ CSS files: $CSS_FILES"
        
        # V√©rifier la taille des assets
        TOTAL_SIZE=$(du -sh dist | cut -f1)
        echo "üìä Total build size: $TOTAL_SIZE"
        
        echo "‚úÖ Build verification successful"
        
    - name: Performance audit
      run: |
        echo "‚ö° Performance audit..."
        
        # V√©rifier la taille des bundles JavaScript
        JS_BUNDLES=$(find dist -name "*.js" -exec du -h {} \; | sort -hr)
        echo "üì¶ JavaScript bundles:"
        echo "$JS_BUNDLES"
        
        # V√©rifier la compression
        if command -v gzip >/dev/null 2>&1; then
          echo "üóúÔ∏è Checking compression..."
          for file in dist/*.js dist/*.css; do
            if [ -f "$file" ]; then
              ORIGINAL_SIZE=$(du -h "$file" | cut -f1)
              COMPRESSED_SIZE=$(gzip -c "$file" | wc -c | numfmt --to=iec)
              echo "  $(basename "$file"): $ORIGINAL_SIZE ‚Üí $COMPRESSED_SIZE (gzipped)"
            fi
          done
        fi
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          dist/
          backend/
          package.json
          package-lock.json
        retention-days: 7

  deploy-to-render:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    environment: production
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: ./
        
    - name: Deploy to Render
      id: deploy
      run: |
        echo "üöÄ Deploying to Render..."
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        
        # D√©clencher un nouveau d√©ploiement via l'API Render
        if [ -n "${{ secrets.RENDER_SERVICE_ID }}" ] && [ -n "${{ secrets.RENDER_API_KEY }}" ]; then
          echo "üì° Triggering Render deployment..."
          
          DEPLOY_RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
            -d '{"clearCache": "do_not_clear"}')
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Deploy trigger successful"
            echo "response=$DEPLOY_RESPONSE" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Deploy trigger failed"
            exit 1
          fi
        else
          echo "‚ÑπÔ∏è Render secrets not configured, skipping deployment"
          exit 1
        fi
        
    - name: Wait for deployment
      run: |
        echo "‚è≥ Waiting for deployment to complete..."
        sleep 60
        
    - name: Verify deployment
      id: verify
      run: |
        echo "üîç Verifying deployment..."
        
        # V√©rifier que l'application r√©pond
        if [ -n "${{ secrets.RENDER_URL }}" ]; then
          echo "üåê Testing deployment at ${{ secrets.RENDER_URL }}"
          
          # Test de connectivit√© avec retry
          MAX_RETRIES=5
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "üîÑ Attempt $((RETRY_COUNT + 1))/$MAX_RETRIES"
            
            # Test de la page principale
            if curl -f -s -m 30 "${{ secrets.RENDER_URL }}" > /dev/null; then
              echo "‚úÖ Main page responding"
              break
            else
              echo "‚ö†Ô∏è Main page not responding, retrying..."
              RETRY_COUNT=$((RETRY_COUNT + 1))
              sleep 30
            fi
          done
          
          # Test de l'API
          if curl -f -s -m 30 "${{ secrets.RENDER_URL }}/api/server" > /dev/null; then
            echo "‚úÖ API endpoint responding"
          else
            echo "‚ùå API endpoint not responding"
            exit 1
          fi
          
          # Test des performances
          echo "‚ö° Performance testing..."
          START_TIME=$(date +%s%N)
          curl -s "${{ secrets.RENDER_URL }}" > /dev/null
          END_TIME=$(date +%s%N)
          RESPONSE_TIME=$(( (END_TIME - START_TIME) / 1000000 ))
          echo "üìä Response time: ${RESPONSE_TIME}ms"
          
          if [ $RESPONSE_TIME -gt 5000 ]; then
            echo "‚ö†Ô∏è Slow response time: ${RESPONSE_TIME}ms"
          fi
          
        else
          echo "‚ÑπÔ∏è RENDER_URL not configured, skipping verification"
          exit 1
        fi

  notify-deployment:
    needs: [deploy-to-render]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Deployment Summary
      run: |
        echo "üöÄ Deployment Summary"
        echo "===================="
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Author: ${{ github.actor }}"
        echo "Deployment URL: ${{ secrets.RENDER_URL }}"
        echo "Workflow: ${{ github.workflow }}"
        echo "Run ID: ${{ github.run_id }}"
        
        if [ "${{ needs.deploy-to-render.result }}" == "success" ]; then
          echo "‚úÖ Deploy: SUCCESS"
          echo "üéâ Application deployed successfully!"
        else
          echo "‚ùå Deploy: FAILED"
          echo "üí• Deployment failed. Check the logs for details."
        fi
        
        echo ""
        echo "üìã Build Information:"
        echo "  - Node.js version: ${{ env.NODE_VERSION }}"
        echo "  - Build timestamp: $(date -u)"
        echo "  - Repository: ${{ github.repository }}"
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "üö® Deployment failed!"
        echo "Check the workflow logs for more details:"
        echo "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
 